#!/usr/bin/env bash

# Copyright 2015 ClearStory Data, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is sourced when running various Spark programs.
# Copy it as spark-env.sh and edit that to configure Spark for your site.

# Options read when launching programs locally with
# ./bin/run-example or ./bin/spark-submit
# - HADOOP_CONF_DIR, to point Spark towards Hadoop configuration files
# - SPARK_LOCAL_IP, to set the IP address Spark binds to on this node
# - SPARK_PUBLIC_DNS, to set the public dns name of the driver program
# - SPARK_CLASSPATH, default classpath entries to append

# Options read by executors and drivers running inside the cluster
# - SPARK_LOCAL_IP, to set the IP address Spark binds to on this node
# - SPARK_PUBLIC_DNS, to set the public DNS name of the driver program
# - SPARK_CLASSPATH, default classpath entries to append
# - SPARK_LOCAL_DIRS, storage directories to use on this node for shuffle and RDD data
# - MESOS_NATIVE_JAVA_LIBRARY, to point to your libmesos.so if you use Mesos

# Options read in YARN client mode
# - HADOOP_CONF_DIR, to point Spark towards Hadoop configuration files
# - SPARK_EXECUTOR_INSTANCES, Number of workers to start (Default: 2)
# - SPARK_EXECUTOR_CORES, Number of cores for the workers (Default: 1).
# - SPARK_EXECUTOR_MEMORY, Memory per Worker (e.g. 1000M, 2G) (Default: 1G)
# - SPARK_DRIVER_MEMORY, Memory for Master (e.g. 1000M, 2G) (Default: 1G)
# - SPARK_YARN_APP_NAME, The name of your application (Default: Spark)
# - SPARK_YARN_QUEUE, The hadoop queue to use for allocation requests (Default: â€˜defaultâ€™)
# - SPARK_YARN_DIST_FILES, Comma separated list of files to be distributed with the job.
# - SPARK_YARN_DIST_ARCHIVES, Comma separated list of archives to be distributed with the job.

# Options for the daemons used in the standalone deploy mode
# - SPARK_MASTER_IP, to bind the master to a different IP address or hostname
# - SPARK_MASTER_PORT / SPARK_MASTER_WEBUI_PORT, to use non-default ports for the master
# - SPARK_MASTER_OPTS, to set config properties only for the master (e.g. "-Dx=y")
# - SPARK_WORKER_CORES, to set the number of cores to use on this machine
# - SPARK_WORKER_MEMORY, to set how much total memory workers have to give executors (e.g. 1000m, 2g)
# - SPARK_WORKER_PORT / SPARK_WORKER_WEBUI_PORT, to use non-default ports for the worker
# - SPARK_WORKER_INSTANCES, to set the number of worker processes per node
# - SPARK_WORKER_DIR, to set the working directory of worker processes
# - SPARK_WORKER_OPTS, to set config properties only for the worker (e.g. "-Dx=y")
# - SPARK_DAEMON_MEMORY, to allocate to the master, worker and history server themselves (default: 1g).
# - SPARK_HISTORY_OPTS, to set config properties only for the history server (e.g. "-Dx=y")
# - SPARK_SHUFFLE_OPTS, to set config properties only for the external shuffle service (e.g. "-Dx=y")
# - SPARK_DAEMON_JAVA_OPTS, to set config properties for all daemons (e.g. "-Dx=y")
# - SPARK_PUBLIC_DNS, to set the public dns name of the master or workers

# Generic options for the daemons used in the standalone deploy mode
# - SPARK_CONF_DIR      Alternate conf dir. (Default: ${SPARK_HOME}/conf)
# - SPARK_LOG_DIR       Where log files are stored.  (Default: ${SPARK_HOME}/logs)
# - SPARK_PID_DIR       Where the pid file is stored. (Default: /tmp)
# - SPARK_IDENT_STRING  A string representing this instance of spark. (Default: $USER)
# - SPARK_NICENESS      The scheduling priority for daemons. (Default: 0)

<%
require 'shellwords'
%>

export SPARK_MASTER_IP=<%= @master_bind_ip %>
export SPARK_MASTER_PORT=<%= @master_port %>
export SPARK_MASTER_WEBUI_PORT=<%= @master_webui_port %>

<% if @worker_opts  %>
export SPARK_WORKER_OPTS+=<%= @worker_opts.shellescape %>
<% end %>

<% if @worker_dir  %>
export SPARK_WORKER_DIR=<%= @worker_dir.shellescape %>
<% end %>

export SPARK_WORKER_MEMORY="<%= @worker_memory_mb %>m"
export SPARK_WORKER_WEBUI_PORT=<%= @worker_webui_port %>
<% if @worker_cores  %>
export SPARK_WORKER_CORES=<%= @worker_cores %>
<% end %>

# If the user did not override the MASTER variable, we assume they are connecting to the Spark
# master we know about.
if [[ -z "${MASTER:-}" ]]; then
  export MASTER=spark://<%= @master_host %>:<%= @master_port %>
fi

<% if @default_local_ip %>
export SPARK_LOCAL_IP=<%= @default_local_ip %>
<% end %>

# SPARK_HOME is set in Spark's run script
# MASTER is specified in spark-env.sh
export MESOS_NATIVE_LIBRARY=/usr/lib/libmesos.so
export MESOS_NATIVE_JAVA_LIBRARY=/usr/lib/libmesos.so

<% if @java_debug_enabled %>

if [ -z "${DEBUG_PORT:-}" ]; then
  for arg in "$@"; do
    case "${arg}" in
      spark.deploy.master.Master) DEBUG_PORT=<%= @master_debug_port %>; break ;;
      spark.deploy.worker.Worker) DEBUG_PORT=<%= @worker_debug_port %>; break ;;
      spark.executor.StandaloneExecutorBackend)
        DEBUG_PORT=<%= @executor_debug_port %>; break ;;
    esac
  done
  if [ -z "${DEBUG_PORT:-}" ]; then
    DEBUG_PORT=<%= @default_debug_port %>
  fi
fi

CLASS_COMMENT=""
if [ -n "${1:-}" ]; then
  CLASS_COMMENT=" (class ${1:-})"
fi

FREE_DEBUG_PORT=$( /usr/local/bin/find-free-port.rb $DEBUG_PORT 100 "Java debugger$CLASS_COMMENT" )

if [ -z "$FREE_DEBUG_PORT" ]; then
  echo "Could not find free port for Java debugger starting with $DEBUG_PORT" >&2
  exit 1
fi

unset DEBUG_PORT FREE_DEBUG_PORT

<% end %>

<% if node['apache_spark']['hadoop_conf_dir'] %>
export HADOOP_CONF_DIR="<%= node['hadoop']['conf_dir'] %>"
<% end %>
